// Code generated by goa v3.7.2, DO NOT EDIT.
//
// Zebrahook HTTP client CLI support package
//
// Command:
// $ goa gen zebrahook/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	zebrahookc "zebrahook/gen/http/zebrahook/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `zebrahook (submit-new-events|register|update|list-webhook-endpoint|get-webhook-endpoint-by-id)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` zebrahook submit-new-events --body '{
      "events": [
         {
            "event_data": {
               "amount": 8000,
               "currency": "eur",
               "id": 372853,
               "payment_method_details": {
                  "card": {
                     "brand": "visa"
                  }
               }
            },
            "event_type": "merchant-93842.charge.succeeded"
         },
         {
            "event_data": {
               "customer": {
                  "address": "Lorem Ipsum 33",
                  "country": "NL"
               },
               "order_id": 12643,
               "sku": "9001-2",
               "type": "A01"
            },
            "event_type": "merchant-93842.order.shipped"
         }
      ]
   }' --token "Veniam fugit consequuntur enim dignissimos sit."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		zebrahookFlags = flag.NewFlagSet("zebrahook", flag.ContinueOnError)

		zebrahookSubmitNewEventsFlags     = flag.NewFlagSet("submit-new-events", flag.ExitOnError)
		zebrahookSubmitNewEventsBodyFlag  = zebrahookSubmitNewEventsFlags.String("body", "REQUIRED", "")
		zebrahookSubmitNewEventsTokenFlag = zebrahookSubmitNewEventsFlags.String("token", "REQUIRED", "")

		zebrahookRegisterFlags     = flag.NewFlagSet("register", flag.ExitOnError)
		zebrahookRegisterBodyFlag  = zebrahookRegisterFlags.String("body", "REQUIRED", "")
		zebrahookRegisterTokenFlag = zebrahookRegisterFlags.String("token", "REQUIRED", "")

		zebrahookUpdateFlags     = flag.NewFlagSet("update", flag.ExitOnError)
		zebrahookUpdateBodyFlag  = zebrahookUpdateFlags.String("body", "REQUIRED", "")
		zebrahookUpdateIDFlag    = zebrahookUpdateFlags.String("id", "REQUIRED", "identifier of the webhook")
		zebrahookUpdateTokenFlag = zebrahookUpdateFlags.String("token", "REQUIRED", "")

		zebrahookListWebhookEndpointFlags            = flag.NewFlagSet("list-webhook-endpoint", flag.ExitOnError)
		zebrahookListWebhookEndpointLimitFlag        = zebrahookListWebhookEndpointFlags.String("limit", "50", "")
		zebrahookListWebhookEndpointOffsetFlag       = zebrahookListWebhookEndpointFlags.String("offset", "", "")
		zebrahookListWebhookEndpointCreatedAtGteFlag = zebrahookListWebhookEndpointFlags.String("created-at-gte", "", "")
		zebrahookListWebhookEndpointUpdatedAtLtFlag  = zebrahookListWebhookEndpointFlags.String("updated-at-lt", "", "")
		zebrahookListWebhookEndpointMetadataFlag     = zebrahookListWebhookEndpointFlags.String("metadata", "", "")
		zebrahookListWebhookEndpointTokenFlag        = zebrahookListWebhookEndpointFlags.String("token", "REQUIRED", "")

		zebrahookGetWebhookEndpointByIDFlags     = flag.NewFlagSet("get-webhook-endpoint-by-id", flag.ExitOnError)
		zebrahookGetWebhookEndpointByIDIDFlag    = zebrahookGetWebhookEndpointByIDFlags.String("id", "REQUIRED", "webhook identifier returned in creation")
		zebrahookGetWebhookEndpointByIDTokenFlag = zebrahookGetWebhookEndpointByIDFlags.String("token", "REQUIRED", "")
	)
	zebrahookFlags.Usage = zebrahookUsage
	zebrahookSubmitNewEventsFlags.Usage = zebrahookSubmitNewEventsUsage
	zebrahookRegisterFlags.Usage = zebrahookRegisterUsage
	zebrahookUpdateFlags.Usage = zebrahookUpdateUsage
	zebrahookListWebhookEndpointFlags.Usage = zebrahookListWebhookEndpointUsage
	zebrahookGetWebhookEndpointByIDFlags.Usage = zebrahookGetWebhookEndpointByIDUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "zebrahook":
			svcf = zebrahookFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "zebrahook":
			switch epn {
			case "submit-new-events":
				epf = zebrahookSubmitNewEventsFlags

			case "register":
				epf = zebrahookRegisterFlags

			case "update":
				epf = zebrahookUpdateFlags

			case "list-webhook-endpoint":
				epf = zebrahookListWebhookEndpointFlags

			case "get-webhook-endpoint-by-id":
				epf = zebrahookGetWebhookEndpointByIDFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "zebrahook":
			c := zebrahookc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "submit-new-events":
				endpoint = c.SubmitNewEvents()
				data, err = zebrahookc.BuildSubmitNewEventsPayload(*zebrahookSubmitNewEventsBodyFlag, *zebrahookSubmitNewEventsTokenFlag)
			case "register":
				endpoint = c.Register()
				data, err = zebrahookc.BuildRegisterPayload(*zebrahookRegisterBodyFlag, *zebrahookRegisterTokenFlag)
			case "update":
				endpoint = c.Update()
				data, err = zebrahookc.BuildUpdatePayload(*zebrahookUpdateBodyFlag, *zebrahookUpdateIDFlag, *zebrahookUpdateTokenFlag)
			case "list-webhook-endpoint":
				endpoint = c.ListWebhookEndpoint()
				data, err = zebrahookc.BuildListWebhookEndpointPayload(*zebrahookListWebhookEndpointLimitFlag, *zebrahookListWebhookEndpointOffsetFlag, *zebrahookListWebhookEndpointCreatedAtGteFlag, *zebrahookListWebhookEndpointUpdatedAtLtFlag, *zebrahookListWebhookEndpointMetadataFlag, *zebrahookListWebhookEndpointTokenFlag)
			case "get-webhook-endpoint-by-id":
				endpoint = c.GetWebhookEndpointByID()
				data, err = zebrahookc.BuildGetWebhookEndpointByIDPayload(*zebrahookGetWebhookEndpointByIDIDFlag, *zebrahookGetWebhookEndpointByIDTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// zebrahookUsage displays the usage of the zebrahook command and its
// subcommands.
func zebrahookUsage() {
	fmt.Fprintf(os.Stderr, `Exposes API for Zebrahook
Usage:
    %[1]s [globalflags] zebrahook COMMAND [flags]

COMMAND:
    submit-new-events: Submit new events, all events will be asynchronously dispatched to all endpoints that are subscribed to the provided event type (`+"`"+`enabled_events`+"`"+`)
    register: Allows to register a new webhook URL with the specified enabled events
    update: Allows to update a webhook created before
    list-webhook-endpoint: Allows to list and query registered webhook
    get-webhook-endpoint-by-id: Allows to get info about a registered webhook URL via the identifier

Additional help:
    %[1]s zebrahook COMMAND --help
`, os.Args[0])
}
func zebrahookSubmitNewEventsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] zebrahook submit-new-events -body JSON -token STRING

Submit new events, all events will be asynchronously dispatched to all endpoints that are subscribed to the provided event type (`+"`"+`enabled_events`+"`"+`)
    -body JSON: 
    -token STRING: 

Example:
    %[1]s zebrahook submit-new-events --body '{
      "events": [
         {
            "event_data": {
               "amount": 8000,
               "currency": "eur",
               "id": 372853,
               "payment_method_details": {
                  "card": {
                     "brand": "visa"
                  }
               }
            },
            "event_type": "merchant-93842.charge.succeeded"
         },
         {
            "event_data": {
               "customer": {
                  "address": "Lorem Ipsum 33",
                  "country": "NL"
               },
               "order_id": 12643,
               "sku": "9001-2",
               "type": "A01"
            },
            "event_type": "merchant-93842.order.shipped"
         }
      ]
   }' --token "Veniam fugit consequuntur enim dignissimos sit."
`, os.Args[0])
}

func zebrahookRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] zebrahook register -body JSON -token STRING

Allows to register a new webhook URL with the specified enabled events
    -body JSON: 
    -token STRING: 

Example:
    %[1]s zebrahook register --body '{
      "enabled_events": [
         "merchant-93842.order.*",
         "my.custom.event"
      ],
      "metadata": {
         "anyKeyHere": "any value here"
      },
      "url": "https://example.com/notifications"
   }' --token "Est excepturi tempore id cum aut."
`, os.Args[0])
}

func zebrahookUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] zebrahook update -body JSON -id STRING -token STRING

Allows to update a webhook created before
    -body JSON: 
    -id STRING: identifier of the webhook
    -token STRING: 

Example:
    %[1]s zebrahook update --body '{
      "disabled": true,
      "enabled_events": [
         "your.event_name",
         "custom.event.*"
      ],
      "metadata": {
         "anyKeyHere": "any value here"
      },
      "url": "https://example.com/notifications"
   }' --id "zhwe_c9ddsgbei1cst46tglh0" --token "Sint perferendis eos repudiandae non."
`, os.Args[0])
}

func zebrahookListWebhookEndpointUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] zebrahook list-webhook-endpoint -limit INT32 -offset UINT32 -created-at-gte UINT64 -updated-at-lt UINT64 -metadata JSON -token STRING

Allows to list and query registered webhook
    -limit INT32: 
    -offset UINT32: 
    -created-at-gte UINT64: 
    -updated-at-lt UINT64: 
    -metadata JSON: 
    -token STRING: 

Example:
    %[1]s zebrahook list-webhook-endpoint --limit 50 --offset 0 --created-at-gte 1646278413 --updated-at-lt 1646369084 --metadata '{
      "metadata": "valuehere"
   }' --token "Aspernatur doloribus eius."
`, os.Args[0])
}

func zebrahookGetWebhookEndpointByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] zebrahook get-webhook-endpoint-by-id -id STRING -token STRING

Allows to get info about a registered webhook URL via the identifier
    -id STRING: webhook identifier returned in creation
    -token STRING: 

Example:
    %[1]s zebrahook get-webhook-endpoint-by-id --id "zhwe_c9ddsgbei1cst46tglh0" --token "Dolor fugiat illum sed in debitis voluptatem."
`, os.Args[0])
}
