// Code generated by goa v3.7.2, DO NOT EDIT.
//
// Zebrahook HTTP server encoders and decoders
//
// Command:
// $ goa gen zebrahook/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"
	"strings"
	zebrahook "zebrahook/gen/zebrahook"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeSubmitNewEventsResponse returns an encoder for responses returned by
// the Zebrahook submitNewEvents endpoint.
func EncodeSubmitNewEventsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*zebrahook.SubmitNewEventsResult)
		enc := encoder(ctx, w)
		body := NewSubmitNewEventsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSubmitNewEventsRequest returns a decoder for requests sent to the
// Zebrahook submitNewEvents endpoint.
func DecodeSubmitNewEventsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SubmitNewEventsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSubmitNewEventsRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token string
		)
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewSubmitNewEventsPayload(&body, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeRegisterResponse returns an encoder for responses returned by the
// Zebrahook register endpoint.
func EncodeRegisterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*zebrahook.WebhookIDAndSecret)
		enc := encoder(ctx, w)
		body := NewRegisterResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRegisterRequest returns a decoder for requests sent to the Zebrahook
// register endpoint.
func DecodeRegisterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RegisterRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRegisterRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token string
		)
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewRegisterPayload(&body, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeUpdateResponse returns an encoder for responses returned by the
// Zebrahook update endpoint.
func EncodeUpdateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*zebrahook.UpdateResult)
		enc := encoder(ctx, w)
		body := NewUpdateResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateRequest returns a decoder for requests sent to the Zebrahook
// update endpoint.
func DecodeUpdateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id    string
			token string

			params = mux.Vars(r)
		)
		id = params["id"]
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdatePayload(&body, id, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeListWebhookEndpointResponse returns an encoder for responses returned
// by the Zebrahook listWebhookEndpoint endpoint.
func EncodeListWebhookEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*zebrahook.ListWebhookEndpointResult)
		enc := encoder(ctx, w)
		body := NewListWebhookEndpointResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListWebhookEndpointRequest returns a decoder for requests sent to the
// Zebrahook listWebhookEndpoint endpoint.
func DecodeListWebhookEndpointRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			limit        int32
			offset       uint32
			createdAtGte *uint64
			updatedAtLt  *uint64
			metadata     map[string]string
			token        string
			err          error
		)
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw == "" {
				limit = 50
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, 32)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int32(v)
			}
		}
		{
			offsetRaw := r.URL.Query().Get("offset")
			if offsetRaw != "" {
				v, err2 := strconv.ParseUint(offsetRaw, 10, 32)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("offset", offsetRaw, "unsigned integer"))
				}
				offset = uint32(v)
			}
		}
		{
			createdAtGteRaw := r.URL.Query().Get("createdAt.gte")
			if createdAtGteRaw != "" {
				v, err2 := strconv.ParseUint(createdAtGteRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("createdAtGte", createdAtGteRaw, "unsigned integer"))
				}
				createdAtGte = &v
			}
		}
		if createdAtGte != nil {
			if *createdAtGte < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("createdAtGte", *createdAtGte, 0, true))
			}
		}
		{
			updatedAtLtRaw := r.URL.Query().Get("updatedAt.lt")
			if updatedAtLtRaw != "" {
				v, err2 := strconv.ParseUint(updatedAtLtRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("updatedAtLt", updatedAtLtRaw, "unsigned integer"))
				}
				updatedAtLt = &v
			}
		}
		if updatedAtLt != nil {
			if *updatedAtLt < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("updatedAtLt", *updatedAtLt, 0, true))
			}
		}
		{
			metadataRaw := r.URL.Query()
			if len(metadataRaw) != 0 {
				for keyRaw, valRaw := range metadataRaw {
					if strings.HasPrefix(keyRaw, "metadata[") {
						if metadata == nil {
							metadata = make(map[string]string)
						}
						var keya string
						{
							openIdx := strings.IndexRune(keyRaw, '[')
							closeIdx := strings.IndexRune(keyRaw, ']')
							keya = keyRaw[openIdx+1 : closeIdx]
						}
						metadata[keya] = valRaw[0]
					}
				}
			}
		}
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewListWebhookEndpointPayload(limit, offset, createdAtGte, updatedAtLt, metadata, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeGetWebhookEndpointByIDResponse returns an encoder for responses
// returned by the Zebrahook getWebhookEndpointById endpoint.
func EncodeGetWebhookEndpointByIDResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*zebrahook.WebhookEndpoint)
		enc := encoder(ctx, w)
		body := NewGetWebhookEndpointByIDResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetWebhookEndpointByIDRequest returns a decoder for requests sent to
// the Zebrahook getWebhookEndpointById endpoint.
func DecodeGetWebhookEndpointByIDRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id    string
			token string
			err   error

			params = mux.Vars(r)
		)
		id = params["id"]
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetWebhookEndpointByIDPayload(id, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// unmarshalEventRequestRequestBodyToZebrahookEventRequest builds a value of
// type *zebrahook.EventRequest from a value of type *EventRequestRequestBody.
func unmarshalEventRequestRequestBodyToZebrahookEventRequest(v *EventRequestRequestBody) *zebrahook.EventRequest {
	res := &zebrahook.EventRequest{
		EventType: *v.EventType,
		Priority:  v.Priority,
	}
	res.EventContent = make(map[string]interface{}, len(v.EventContent))
	for key, val := range v.EventContent {
		tk := key
		tv := val
		res.EventContent[tk] = tv
	}

	return res
}

// marshalZebrahookWebhookEndpointWithoutSecretToWebhookEndpointWithoutSecretResponseBody
// builds a value of type *WebhookEndpointWithoutSecretResponseBody from a
// value of type *zebrahook.WebhookEndpointWithoutSecret.
func marshalZebrahookWebhookEndpointWithoutSecretToWebhookEndpointWithoutSecretResponseBody(v *zebrahook.WebhookEndpointWithoutSecret) *WebhookEndpointWithoutSecretResponseBody {
	res := &WebhookEndpointWithoutSecretResponseBody{
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
		Status:    v.Status,
		URL:       v.URL,
		ID:        v.ID,
	}
	if v.EnabledEvents != nil {
		res.EnabledEvents = make([]string, len(v.EnabledEvents))
		for i, val := range v.EnabledEvents {
			res.EnabledEvents[i] = val
		}
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]string, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}
