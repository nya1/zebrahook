// Code generated by goa v3.7.2, DO NOT EDIT.
//
// Zebrahook HTTP server
//
// Command:
// $ goa gen zebrahook/design

package server

import (
	"context"
	"net/http"
	zebrahook "zebrahook/gen/zebrahook"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the Zebrahook service endpoint HTTP handlers.
type Server struct {
	Mounts                 []*MountPoint
	SubmitNewEvents        http.Handler
	Register               http.Handler
	Update                 http.Handler
	ListWebhookEndpoint    http.Handler
	GetWebhookEndpointByID http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the Zebrahook service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *zebrahook.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"SubmitNewEvents", "POST", "/v1/webhook/events"},
			{"Register", "POST", "/v1/webhook/endpoints"},
			{"Update", "PUT", "/v1/webhook/endpoints/{id}"},
			{"ListWebhookEndpoint", "GET", "/v1/webhook/endpoints/"},
			{"GetWebhookEndpointByID", "GET", "/v1/webhook/endpoints/{id}"},
		},
		SubmitNewEvents:        NewSubmitNewEventsHandler(e.SubmitNewEvents, mux, decoder, encoder, errhandler, formatter),
		Register:               NewRegisterHandler(e.Register, mux, decoder, encoder, errhandler, formatter),
		Update:                 NewUpdateHandler(e.Update, mux, decoder, encoder, errhandler, formatter),
		ListWebhookEndpoint:    NewListWebhookEndpointHandler(e.ListWebhookEndpoint, mux, decoder, encoder, errhandler, formatter),
		GetWebhookEndpointByID: NewGetWebhookEndpointByIDHandler(e.GetWebhookEndpointByID, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "Zebrahook" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.SubmitNewEvents = m(s.SubmitNewEvents)
	s.Register = m(s.Register)
	s.Update = m(s.Update)
	s.ListWebhookEndpoint = m(s.ListWebhookEndpoint)
	s.GetWebhookEndpointByID = m(s.GetWebhookEndpointByID)
}

// Mount configures the mux to serve the Zebrahook endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountSubmitNewEventsHandler(mux, h.SubmitNewEvents)
	MountRegisterHandler(mux, h.Register)
	MountUpdateHandler(mux, h.Update)
	MountListWebhookEndpointHandler(mux, h.ListWebhookEndpoint)
	MountGetWebhookEndpointByIDHandler(mux, h.GetWebhookEndpointByID)
}

// Mount configures the mux to serve the Zebrahook endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountSubmitNewEventsHandler configures the mux to serve the "Zebrahook"
// service "submitNewEvents" endpoint.
func MountSubmitNewEventsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/webhook/events", f)
}

// NewSubmitNewEventsHandler creates a HTTP handler which loads the HTTP
// request and calls the "Zebrahook" service "submitNewEvents" endpoint.
func NewSubmitNewEventsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSubmitNewEventsRequest(mux, decoder)
		encodeResponse = EncodeSubmitNewEventsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "submitNewEvents")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Zebrahook")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRegisterHandler configures the mux to serve the "Zebrahook" service
// "register" endpoint.
func MountRegisterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/webhook/endpoints", f)
}

// NewRegisterHandler creates a HTTP handler which loads the HTTP request and
// calls the "Zebrahook" service "register" endpoint.
func NewRegisterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRegisterRequest(mux, decoder)
		encodeResponse = EncodeRegisterResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "register")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Zebrahook")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateHandler configures the mux to serve the "Zebrahook" service
// "update" endpoint.
func MountUpdateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/webhook/endpoints/{id}", f)
}

// NewUpdateHandler creates a HTTP handler which loads the HTTP request and
// calls the "Zebrahook" service "update" endpoint.
func NewUpdateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateRequest(mux, decoder)
		encodeResponse = EncodeUpdateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Zebrahook")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListWebhookEndpointHandler configures the mux to serve the "Zebrahook"
// service "listWebhookEndpoint" endpoint.
func MountListWebhookEndpointHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/webhook/endpoints/", f)
}

// NewListWebhookEndpointHandler creates a HTTP handler which loads the HTTP
// request and calls the "Zebrahook" service "listWebhookEndpoint" endpoint.
func NewListWebhookEndpointHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListWebhookEndpointRequest(mux, decoder)
		encodeResponse = EncodeListWebhookEndpointResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listWebhookEndpoint")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Zebrahook")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetWebhookEndpointByIDHandler configures the mux to serve the
// "Zebrahook" service "getWebhookEndpointById" endpoint.
func MountGetWebhookEndpointByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/webhook/endpoints/{id}", f)
}

// NewGetWebhookEndpointByIDHandler creates a HTTP handler which loads the HTTP
// request and calls the "Zebrahook" service "getWebhookEndpointById" endpoint.
func NewGetWebhookEndpointByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetWebhookEndpointByIDRequest(mux, decoder)
		encodeResponse = EncodeGetWebhookEndpointByIDResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getWebhookEndpointById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Zebrahook")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
