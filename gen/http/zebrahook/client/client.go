// Code generated by goa v3.7.2, DO NOT EDIT.
//
// Zebrahook client HTTP transport
//
// Command:
// $ goa gen zebrahook/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Zebrahook service endpoint HTTP clients.
type Client struct {
	// SubmitNewEvents Doer is the HTTP client used to make requests to the
	// submitNewEvents endpoint.
	SubmitNewEventsDoer goahttp.Doer

	// Register Doer is the HTTP client used to make requests to the register
	// endpoint.
	RegisterDoer goahttp.Doer

	// Update Doer is the HTTP client used to make requests to the update endpoint.
	UpdateDoer goahttp.Doer

	// ListWebhookEndpoint Doer is the HTTP client used to make requests to the
	// listWebhookEndpoint endpoint.
	ListWebhookEndpointDoer goahttp.Doer

	// GetWebhookEndpointByID Doer is the HTTP client used to make requests to the
	// getWebhookEndpointById endpoint.
	GetWebhookEndpointByIDDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Zebrahook service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		SubmitNewEventsDoer:        doer,
		RegisterDoer:               doer,
		UpdateDoer:                 doer,
		ListWebhookEndpointDoer:    doer,
		GetWebhookEndpointByIDDoer: doer,
		RestoreResponseBody:        restoreBody,
		scheme:                     scheme,
		host:                       host,
		decoder:                    dec,
		encoder:                    enc,
	}
}

// SubmitNewEvents returns an endpoint that makes HTTP requests to the
// Zebrahook service submitNewEvents server.
func (c *Client) SubmitNewEvents() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubmitNewEventsRequest(c.encoder)
		decodeResponse = DecodeSubmitNewEventsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSubmitNewEventsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SubmitNewEventsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Zebrahook", "submitNewEvents", err)
		}
		return decodeResponse(resp)
	}
}

// Register returns an endpoint that makes HTTP requests to the Zebrahook
// service register server.
func (c *Client) Register() goa.Endpoint {
	var (
		encodeRequest  = EncodeRegisterRequest(c.encoder)
		decodeResponse = DecodeRegisterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRegisterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RegisterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Zebrahook", "register", err)
		}
		return decodeResponse(resp)
	}
}

// Update returns an endpoint that makes HTTP requests to the Zebrahook service
// update server.
func (c *Client) Update() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateRequest(c.encoder)
		decodeResponse = DecodeUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Zebrahook", "update", err)
		}
		return decodeResponse(resp)
	}
}

// ListWebhookEndpoint returns an endpoint that makes HTTP requests to the
// Zebrahook service listWebhookEndpoint server.
func (c *Client) ListWebhookEndpoint() goa.Endpoint {
	var (
		encodeRequest  = EncodeListWebhookEndpointRequest(c.encoder)
		decodeResponse = DecodeListWebhookEndpointResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListWebhookEndpointRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListWebhookEndpointDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Zebrahook", "listWebhookEndpoint", err)
		}
		return decodeResponse(resp)
	}
}

// GetWebhookEndpointByID returns an endpoint that makes HTTP requests to the
// Zebrahook service getWebhookEndpointById server.
func (c *Client) GetWebhookEndpointByID() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetWebhookEndpointByIDRequest(c.encoder)
		decodeResponse = DecodeGetWebhookEndpointByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetWebhookEndpointByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetWebhookEndpointByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Zebrahook", "getWebhookEndpointById", err)
		}
		return decodeResponse(resp)
	}
}
