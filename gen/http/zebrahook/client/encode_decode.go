// Code generated by goa v3.7.2, DO NOT EDIT.
//
// Zebrahook HTTP client encoders and decoders
//
// Command:
// $ goa gen zebrahook/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	zebrahook "zebrahook/gen/zebrahook"

	goahttp "goa.design/goa/v3/http"
)

// BuildSubmitNewEventsRequest instantiates a HTTP request object with method
// and path set to call the "Zebrahook" service "submitNewEvents" endpoint
func (c *Client) BuildSubmitNewEventsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubmitNewEventsZebrahookPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Zebrahook", "submitNewEvents", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubmitNewEventsRequest returns an encoder for requests sent to the
// Zebrahook submitNewEvents server.
func EncodeSubmitNewEventsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*zebrahook.SubmitNewEventsPayload)
		if !ok {
			return goahttp.ErrInvalidType("Zebrahook", "submitNewEvents", "*zebrahook.SubmitNewEventsPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewSubmitNewEventsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Zebrahook", "submitNewEvents", err)
		}
		return nil
	}
}

// DecodeSubmitNewEventsResponse returns a decoder for responses returned by
// the Zebrahook submitNewEvents endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeSubmitNewEventsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SubmitNewEventsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Zebrahook", "submitNewEvents", err)
			}
			res := NewSubmitNewEventsResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Zebrahook", "submitNewEvents", resp.StatusCode, string(body))
		}
	}
}

// BuildRegisterRequest instantiates a HTTP request object with method and path
// set to call the "Zebrahook" service "register" endpoint
func (c *Client) BuildRegisterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterZebrahookPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Zebrahook", "register", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterRequest returns an encoder for requests sent to the Zebrahook
// register server.
func EncodeRegisterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*zebrahook.RegisterPayload)
		if !ok {
			return goahttp.ErrInvalidType("Zebrahook", "register", "*zebrahook.RegisterPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewRegisterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Zebrahook", "register", err)
		}
		return nil
	}
}

// DecodeRegisterResponse returns a decoder for responses returned by the
// Zebrahook register endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRegisterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RegisterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Zebrahook", "register", err)
			}
			err = ValidateRegisterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Zebrahook", "register", err)
			}
			res := NewRegisterWebhookIDAndSecretOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Zebrahook", "register", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "Zebrahook" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*zebrahook.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Zebrahook", "update", "*zebrahook.UpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateZebrahookPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Zebrahook", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the Zebrahook
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*zebrahook.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("Zebrahook", "update", "*zebrahook.UpdatePayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Zebrahook", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// Zebrahook update endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Zebrahook", "update", err)
			}
			res := NewUpdateResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Zebrahook", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildListWebhookEndpointRequest instantiates a HTTP request object with
// method and path set to call the "Zebrahook" service "listWebhookEndpoint"
// endpoint
func (c *Client) BuildListWebhookEndpointRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListWebhookEndpointZebrahookPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Zebrahook", "listWebhookEndpoint", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListWebhookEndpointRequest returns an encoder for requests sent to the
// Zebrahook listWebhookEndpoint server.
func EncodeListWebhookEndpointRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*zebrahook.ListWebhookEndpointPayload)
		if !ok {
			return goahttp.ErrInvalidType("Zebrahook", "listWebhookEndpoint", "*zebrahook.ListWebhookEndpointPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		values.Add("offset", fmt.Sprintf("%v", p.Offset))
		if p.CreatedAtGte != nil {
			values.Add("createdAt.gte", fmt.Sprintf("%v", *p.CreatedAtGte))
		}
		if p.UpdatedAtLt != nil {
			values.Add("updatedAt.lt", fmt.Sprintf("%v", *p.UpdatedAtLt))
		}
		for key, value := range p.Metadata {
			keyStr := key
			valueStr := value
			values.Add(keyStr, valueStr)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListWebhookEndpointResponse returns a decoder for responses returned
// by the Zebrahook listWebhookEndpoint endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeListWebhookEndpointResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListWebhookEndpointResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Zebrahook", "listWebhookEndpoint", err)
			}
			err = ValidateListWebhookEndpointResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Zebrahook", "listWebhookEndpoint", err)
			}
			res := NewListWebhookEndpointResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Zebrahook", "listWebhookEndpoint", resp.StatusCode, string(body))
		}
	}
}

// BuildGetWebhookEndpointByIDRequest instantiates a HTTP request object with
// method and path set to call the "Zebrahook" service "getWebhookEndpointById"
// endpoint
func (c *Client) BuildGetWebhookEndpointByIDRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*zebrahook.GetWebhookEndpointByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Zebrahook", "getWebhookEndpointById", "*zebrahook.GetWebhookEndpointByIDPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetWebhookEndpointByIDZebrahookPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Zebrahook", "getWebhookEndpointById", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetWebhookEndpointByIDRequest returns an encoder for requests sent to
// the Zebrahook getWebhookEndpointById server.
func EncodeGetWebhookEndpointByIDRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*zebrahook.GetWebhookEndpointByIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("Zebrahook", "getWebhookEndpointById", "*zebrahook.GetWebhookEndpointByIDPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetWebhookEndpointByIDResponse returns a decoder for responses
// returned by the Zebrahook getWebhookEndpointById endpoint. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeGetWebhookEndpointByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetWebhookEndpointByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Zebrahook", "getWebhookEndpointById", err)
			}
			err = ValidateGetWebhookEndpointByIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Zebrahook", "getWebhookEndpointById", err)
			}
			res := NewGetWebhookEndpointByIDWebhookEndpointOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Zebrahook", "getWebhookEndpointById", resp.StatusCode, string(body))
		}
	}
}

// marshalZebrahookEventRequestToEventRequestRequestBody builds a value of type
// *EventRequestRequestBody from a value of type *zebrahook.EventRequest.
func marshalZebrahookEventRequestToEventRequestRequestBody(v *zebrahook.EventRequest) *EventRequestRequestBody {
	res := &EventRequestRequestBody{
		EventType: v.EventType,
		Priority:  v.Priority,
	}
	if v.EventContent != nil {
		res.EventContent = make(map[string]interface{}, len(v.EventContent))
		for key, val := range v.EventContent {
			tk := key
			tv := val
			res.EventContent[tk] = tv
		}
	}

	return res
}

// marshalEventRequestRequestBodyToZebrahookEventRequest builds a value of type
// *zebrahook.EventRequest from a value of type *EventRequestRequestBody.
func marshalEventRequestRequestBodyToZebrahookEventRequest(v *EventRequestRequestBody) *zebrahook.EventRequest {
	res := &zebrahook.EventRequest{
		EventType: v.EventType,
		Priority:  v.Priority,
	}
	if v.EventContent != nil {
		res.EventContent = make(map[string]interface{}, len(v.EventContent))
		for key, val := range v.EventContent {
			tk := key
			tv := val
			res.EventContent[tk] = tv
		}
	}

	return res
}

// unmarshalWebhookEndpointWithoutSecretResponseBodyToZebrahookWebhookEndpointWithoutSecret
// builds a value of type *zebrahook.WebhookEndpointWithoutSecret from a value
// of type *WebhookEndpointWithoutSecretResponseBody.
func unmarshalWebhookEndpointWithoutSecretResponseBodyToZebrahookWebhookEndpointWithoutSecret(v *WebhookEndpointWithoutSecretResponseBody) *zebrahook.WebhookEndpointWithoutSecret {
	res := &zebrahook.WebhookEndpointWithoutSecret{
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
		Status:    v.Status,
		URL:       *v.URL,
		ID:        *v.ID,
	}
	res.EnabledEvents = make([]string, len(v.EnabledEvents))
	for i, val := range v.EnabledEvents {
		res.EnabledEvents[i] = val
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]string, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}
